#!/usr/bin/env python3
import sys


def f(B, d):
    '''
    >>> f(6, 0) # 1, 3, 5
    3
    >>> f(6, 1) # 2, 3, 6
    3
    >>> f(6, 2) # 4, 5, 6
    3
    >>> f(6, 3)
    0
    '''
    r = 2**(d+1)
    rr = 2 ** d
    return B // r * rr + max(B % r - rr + 1, 0)
    
def g(A, B, d):
    '''
    >>> g(0, 6, 0) # 1, 3, 5
    3
    >>> g(0, 6, 1) # 2, 3, 6
    3
    >>> g(0, 6, 2) # 4, 5, 6
    3
    >>> g(2, 6, 0) # 3, 5
    2
    '''
    if A == 0:
        return f(B, d)
    return f(B, d) - f(A-1, d)

def solve(A: int, B: int):
    ans = 0
    for d in range(10000, -1, -1):
        ans <<= 1
        ans += g(A, B, d) % 2
    return ans


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    A = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int
    print(solve(A, B))

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    test()
    main()
