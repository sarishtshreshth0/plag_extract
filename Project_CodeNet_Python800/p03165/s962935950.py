#!/usr/bin/env python3
import sys


def solve(s: str, t: str):
    len_s = len(s)
    len_t = len(t)

    dp = [[0] * (len_t+1) for _ in range(len_s+1)]

    for i in range(len_s):
        for j in range(len_t):
            if s[i] == t[j]:
                dp[i+1][j+1] = dp[i][j] + 1
            else:
                dp[i+1][j+1] = max(dp[i][j+1], dp[i+1][j])

    ans = []
    while len_s > 0 and len_t > 0:
        if s[len_s-1] == t[len_t-1]:
            ans.append(s[len_s-1])
            len_s -= 1
            len_t -= 1
        elif dp[len_s][len_t] == dp[len_s-1][len_t]:
            len_s -= 1
        else:
            len_t -= 1

    print("".join(reversed(ans)))
    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    s = next(tokens)  # type: str
    t = next(tokens)  # type: str
    solve(s, t)


if __name__ == '__main__':
    main()
